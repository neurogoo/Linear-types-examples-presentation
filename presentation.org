---
patat:
    slideLevel: 2
    images:
        backend: iterm2
...
#+Title: Examples of linear types
#+Author: Toni Okuogume
#+OPTIONS: num:nil toc:nil
#+REVEAL_PLUGINS: (highlight)
* What I am going talk about
:PROPERTIES:
:COMMENT: Remember to tell what you would like people getting out of this talk
:END:
- Motivation
- Quick intro for Idris
- Few examples of linear types
- Demo time? 
- Conclusion
* Linear types
*** Promise
    Resource marked as linear must be used exactly once
*** What means to "use" variable
   - Data type or primitive value -> Pattern matched against
   - Function -> function applied

     Intuition with functions: function with linear parameter guarantees exactly one use of parameter for one call of function
** Motivation for linear types
  - Safely using mutable data structures
  - Enforce data flows
  - Safe resource usage
  - Better control for performance
* Quick intro for Idris
** Simple example
   Idris is strict dependently typed programming language
   - Idris 1.3.3
   - Idris2 0.3.0
   #+begin_src idris
     isSingleton : Bool -> Type
     isSingleton True = Nat
     isSingleton False = List Nat

     giveMeNumber : (multiple : Bool) -> (isSingleton multiple)
     giveMeNumber False = [2,2,2]
     giveMeNumber True = 2
   #+end_src
** A step further
#+begin_src idris
  goodPassword : String -> Type
  goodPassword s = length s `GTE` 12

  record Login where
    constructor MkLogin
    loginName : String
    password : (s : String ** goodPassword s)

  passwordStrengthChecker : (password : String) -> Dec (goodPassword password)
  passwordStrengthChecker password = isLTE 12 (length password)

  createNewUser : (loginName : String) -> (password : String) -> Either String Login
  createNewUser loginName password = case passwordStrengthChecker password of
    Yes prf => Right $ MkLogin loginName (password ** prf)
    No _  => Left "Password was not long enough"
#+end_src
* Examples of linear types
** Basic example
   #+begin_src idris
     dup : (1 _ : Int) -> (Int,Int)
     dup x = (x,x)
   #+end_src
   #+begin_example
     While processing right hand side of dup at Linear.idr:
          There are 2 uses of linear name x at:
          dup x = (x,x)
   #+end_example
** Basic example2
   #+begin_src idris
     greetAudience : (1 _ : String) -> String
     greetAudience city = "Hello Sydney"
   #+end_src
   #+begin_example
     While processing right hand side of greetAudience at Linear.idr:
           There are 0 uses of linear name city at:
           greetAudience city = "Hello Sydney"
   #+end_example
** Operation flow
   #+begin_src idris
     fetchImage : (url : String) -> (1 _ : ((1 _ : Image) -> Image)) -> Image
     cropImage : (1 _ : Image) -> Image
     transposeImage : (1 _ : Image) -> Image

     picture : (url : String) -> Image
     picture url = fetchImage url $ \image =>
       let croppedImage = cropImage image
           transposedImage = transposeImage croppedImage
       in transposedImage
   #+end_src
** Mutable array 1
   Taken from paper *Linear Haskell: practical linearity in a higher-order polymorphic language*
   #+begin_src haskell
     array :: Int -> [(Int,a)] -> Array a
     array size pairs = runST $ do
         ma <- newMArray size
         forM_ pairs (write ma)
         unsafeFreeze ma
   #+end_src
** Mutable array 2
   #+begin_src idris
     newMArray : Int -> (1 _ : ((1 _ : MArray a) -> Ur b)) -> b
     write : (1 _ : MArray a) -> (Int, a) -> MArray a
     read : (1 _ : MArray a) -> Int -> (MArray a, Ur a)
     freeze : (1 _ : MArray a) -> Ur(Array a)
     foldl : ((1 _ : a) -> b -> a) -> (1 _ : a) -> (1 _ : List b) -> a

     array : Int -> List (Int,a) -> Array a
     array size pairs = newMArray size $ \ma =>
       freeze (foldl write ma pairs)
   #+end_src
** Cleaning resource
   #+begin_src idris
     openFile : (1 _ : String) -> IO FileHandle
     -- (#) : a -> (1 _ : b) -> LPair a b
     read : (1 _ : FileHandle) -> IO (LPair String FileHandle)
     closeFile : (1 _ : FileHandle) -> IO ()
     myBind : (1 _ : IO a) -> (1 _ : ((1 _ : a) -> IO b)) -> IO b

     seq : (1 _ : IO ()) -> IO String -> IO String
     utf8Decode : String -> String

     readFile : (1 _ : String) -> IO String
     readFile filename = let (>>=) = myBind in do
       file <- openFile filename
       (content # filehandler) <- read file
       closeFile filehandler `seq` pure (utf8Decode content)
   #+end_src
* Demo time?
* Where to try
  - Idris 2 (still very much work-in-progress state)
  - Haskell, upcoming major version GHC 9.0
  - ATS
    
  Also related
  - Rust
  - Clean
* Links
  - Idris 2 github page with links to different talks https://github.com/idris-lang/Idris2
  - Tweag blog, for example https://www.tweag.io/blog/2020-11-11-linear-dps/
  - A Tase of ATS talk https://www.youtube.com/watch?v=ADN6B1Wk5Ts
  - Linear Haskell: practical linearity in a higher-order polymorphic language https://arxiv.org/abs/1710.09756
